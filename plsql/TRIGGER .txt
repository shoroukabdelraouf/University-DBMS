DROP TRIGGER UNIVERSITY.COURSE_BEFOREDELETE;

CREATE OR REPLACE TRIGGER UNIVERSITY.Course_BeforeDelete
BEFORE DELETE ON UNIVERSITY.COURSE FOR EACH ROW
BEGIN
  
    DeleteStudCourse(:OLD.cid);
END Course_BeforeDelete;
/
DROP TRIGGER UNIVERSITY.DEPARTMENT_BEFOREDELETE;

CREATE OR REPLACE TRIGGER UNIVERSITY.Department_BeforeDelete
BEFORE DELETE ON UNIVERSITY.DEPARTMENT FOR EACH ROW
BEGIN
    DeleteDepartment(:OLD.dname);
END;
/
DROP TRIGGER UNIVERSITY.PROFESSOR_BEFOREDELETE;

CREATE OR REPLACE TRIGGER UNIVERSITY.Professor_BeforeDelete
BEFORE DELETE ON UNIVERSITY.PROFESSOR FOR EACH ROW
BEGIN
    DeleteProfessor(:OLD.professor_id);
END;
/
DROP TRIGGER UNIVERSITY.STUDENT_BEFOREDELETE;

CREATE OR REPLACE TRIGGER UNIVERSITY.Student_BeforeDelete
BEFORE DELETE ON UNIVERSITY.STUDENT FOR EACH ROW
BEGIN
 
    DeleteStudent(:OLD.stud_id);
END Student_BeforeDelete;
/
DROP TRIGGER UNIVERSITY.UPDATE_GPA;

CREATE OR REPLACE TRIGGER UNIVERSITY.update_GPA
FOR INSERT OR UPDATE ON UNIVERSITY.STUD_COURSE 
COMPOUND TRIGGER

AFTER STATEMENT IS
BEGIN
  gpa_update_pkg.process_updated_students;
END AFTER STATEMENT;

BEFORE EACH ROW IS
BEGIN
  IF INSERTING OR UPDATING THEN
    gpa_update_pkg.add_student_to_update(:NEW.stud_id);
  END IF;
END BEFORE EACH ROW;

END update_GPA;
/



